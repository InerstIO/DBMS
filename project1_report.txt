1. Basic information
Student ID : 20689831
Student Name : Yuxuan Hao
Student ID : 25245625
Student Name : Yu Feng
OS (bit) : Ubuntu 16.04.3 x64
gcc version : 5.4.0 20160609


2. Internal Record Format
- Show your record format design and describe how your design satisfies O(1) field access. If not, just mention that you haven't implemented this feature.
- Describe how you store a VarChar field.

We use the following format to store the records:
---------------------------------------------
|num|pointer1|pointer2|...|value1|value2|...|
---------------------------------------------
Num stores how many fields are in this record. We store it as an integer, which means it occupies 4 bytes.
We use 2 bytes to store each pointer. Since there are 16 digits in 2 bytes, and 2^16>4096, we can use 0xffff value to represent null without worries. If a pointer is not null, it will point to the location at the end of the value it points to. If a field is null, it will not occupy any space in value part.
To read a field, we can find its pointer in O(1) time since we can know the rank of the field according to recordDescriptor. If the value of pointer is 0xffff, we return a null directly. Otherwise, if it is not the first field, assuming it is the kth field, we can return the data locates between pointers(k-1) to pointers(k). This costs O(1) time. If we need to read the first field, we return the data between num*2 to first pointer. It is still O(1) time. Therefore, we achieve O(1) read time complexity by using this format. 
As we store the record in this format, we do not need to do any special handling for varChar field. Since we can always know the location of any field no matter what type it is.


3. Page Format
- Show your page format design
----------------------------------------------
record1|record2|...|recordN|
.
free space
.
                    |SlotDirN|...|SlotDir1|N|F
----------------------------------------------
Records are appended to the free space offset in the page (in the top part of the page) until there is not enough free space left in that page.
The last byte of the page is used to store the the offset of free space, so that new records can be appended at that offset, let's call it F.
The byte before the last byte is used to store the number of records in that page, let's call it N.
Before that byte, there are N slot directories indicating the offset and length of the records so that we can get the position of the record in O(1) time.
By using F and N, we can easily get the amount of free space in that page = PAGE_SIZE - 2 * sizeof(int) - N * sizeof(SlotDir) - F.


4. Implementation Detail
- Other implementation details goes here.
The way to find a page with enough space is implemented in a way slightly different from the project1-description. 
When the current page doesn't have enough space, instead of checking from the beginning of the file (first page), we check from the last to the first page.
I think last to first is more efficient than first to last, since the first page has been checked for many times, and it's less likely to have enough space, while the last - 1 page is more likely to have enough space.


5. Other (optional)
- Freely use this section to tell us about things that are related to the project 1, but not related to the other sections (optional)

